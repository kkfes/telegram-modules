# meta developer: @kkfes

from .. import loader, utils
import asyncio, pytz, re, telethon
from telethon.tl.types import MessageEntityTextUrl
import json as JSON
from datetime import datetime, date, time

class KMod(loader.Module):
	"–ú–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–Ω–∏—è –∂–µ—Ä—Ç–≤ Iris Bot"
	strings={"name": "KMod"}
	
	async def client_ready(self, client, db):
		self.db = db
		if not self.db.get("KMod", "infList", False):
			self.db.set("KMod", "infList", {})
	

	async def zaraddcmd(self, message):
		" –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Ä–∏—Å–∞ —Å –∑–∞—Ä–∞–∂–µ–Ω–∏–µ–º, –¥–æ–±–∞–≤–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π (@is/name –∑–Ω–∞—á–µ–Ω–∏–µ) –ë–ï–ó –ö, –ø–∏—Å–∞—Ç—å 8700 —Ç —Ç.–¥"
		infList = self.db.get("KMod", "infList")
		timezone = "Europe/Kiev"
		time = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
		reply = await message.get_reply_message()
		args = utils.get_args_raw(message)
		args_list = args.split(' ')
		if len(args_list)==2:
			try:
				user, count = str(args_list[0]), float(args_list[1])
			except:
				await utils.answer(message, "<emoji document_id=5215273032553078755>‚ùé</emoji> –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
				return
			us = None
			try:
				us = infList[args_list[0]]
			except:
				us = None
			addtxt = ''
			if us!=None:
				addtxt='<s>'+us[0]+'</s> -'
			infList[user] = [str(count), time]
			self.db.set("KMod", "infList", infList)
			await utils.answer(
				message,
				f"<emoji document_id=5212932275376759608>‚úÖ</emoji> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{args_list[0]}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π!\n"
				f"‚ÑπÔ∏è –ß–∏—Å–ª–æ: {addtxt}<code>{count}</code>\n"
				f"<emoji document_id=6334497185828177668>üìÖ</emoji> –î–∞—Ç–∞: <b>{time}</b>"
			)
		else:
			if not reply: 
				return await utils.answer(message, '<emoji document_id=5215273032553078755>‚ùé</emoji> –†–µ–ø–ª–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–º—Å –∏—Ä–∏—Å–∞ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"')
			elif not '–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' in reply.text and not '–ø–æ–¥–≤–µ—Ä–≥–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' in reply.text:
				return await utils.answer(message, '<emoji document_id=5215273032553078755>‚ùé</emoji> –†–µ–ø–ª–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–º—Å –∏—Ä–∏—Å–∞ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"')
			else: #‚ò£
				text = reply.text
				x = text.index('‚ò£')+4
				count = text[x:].split(' ', maxsplit=1)[0]
				t = str(count)
				t = t.replace(",", "." )
				if t.endswith('k'):
					tn = float(t[0:(len(t)-1)])
					tn=tn*1000
					t=str(tn)
				x = text.index('user?id=') + 8
				user = '@' + text[x:].split('"', maxsplit=1)[0]
				us = None
				try:
					us = infList[user]
				except:
					us = None
				addtxt = ''
				if us!=None:
					addtxt='<s>'+us[0]+'</s> -'
				infList[user] = [t, time]
				self.db.set("KMod", "infList", infList)
				await utils.answer(message, f"<emoji document_id=5212932275376759608>‚úÖ</emoji> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π.\n‚ÑπÔ∏è –ß–∏—Å–ª–æ: {addtxt}<code>{count}</code>\n<emoji document_id=6334497185828177668>üìÖ</emoji> –î–∞—Ç–∞: <b>{time}</b>")


	async def zarlistcmd(self, message):
		"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π"
		infList = self.db.get("KMod", "infList")
		sms = '<emoji document_id=6334446006997877909>üåÄ</emoji> –°–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π:\n'
		for key, value in infList.items():
			sms+=f'<b>‚Ä¢ <code>{key}</code> -- <code>{value[0]}</code> [<i>{value[1]}</i>]</b>\n'
		await utils.answer(message, sms)

	async def zarfcmd(self, message):
		"–ø–æ–∏—Å–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π .zarf @id/@name"
		infList = self.db.get("KMod", "infList")
		args = utils.get_args_raw(message)
		args_list = args.split(' ')
		try:
			user = infList[args_list[0]]
			await utils.answer(message, f"<b><emoji document_id=5212932275376759608>‚úÖ</emoji> –ñ–µ—Ä—Ç–≤–∞ <code>{args_list[0]}</code>:\n‚ò£Ô∏è {user[0]} –±–∏–æ-–æ–ø—ã—Ç–∞.\n<emoji document_id=6334497185828177668>üìÖ</emoji> –î–∞—Ç–∞: <i>{user[1]}</i></b>")
		except:
			await utils.answer(message, "<emoji document_id=5215273032553078755>‚ùé</emoji> –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

	async def zarrmcmd(self, message):
		"–£–¥–∞–ª—è–µ—Ç –∏–¥ –∏–∑ —Å–ø–∏—Å–∫–∞"
		infList = self.db.get("KMod", "infList")
		args = utils.get_args_raw(message)
		args_list = args.split(' ')
		try:
			infList.pop(args_list[0])
			self.db.set("KMod", "infList", infList)
			await utils.answer(message, f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{args}</code> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
		except:
			await utils.answer(message, "<emoji document_id=5215273032553078755>‚ùé</emoji> –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")


	async def zarcheckcmd(self, message):
		"–û—Ç–≤–µ—Ç–æ–º –Ω–∞ –±–∏–æ—Ç–æ–ø/–±–∏–æ—Ç–æ–ø —á–∞—Ç–∞/–±–∏–æ—Ç–æ–ø –∫–æ—Ä–ø"
		infList = self.db.get("KMod", "infList")
		reply = await message.get_reply_message()
		txt = '<b><emoji document_id=6327738732665374492>üö®</emoji> –í–æ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã–µ –∂–µ—Ä—Ç–≤—ã:</b>\n'
		messag = reply.message.split('\n')
		i = 1
		for value in reply.entities:	
			try:
				text = '@'+value.url.split("=")[1]
				user = None
				try:
					user = infList[text]
				except:
					user = None
				if user!=None:
					num = float(user[0])
					idx1 = messag[i].index("|")
					idx2 = messag[i].rindex("|")
					give = messag[i][idx1+1:idx2-6]
					t = str(give)
					t = t.replace(",", "." )
					while "|" in t:
						t=t[t.index("|")+1:(len(t)-1)]
					num1 = 0
					if t.endswith('k'):
						tn = float(t[0:(len(t)-1)])
						tn=tn*1000
						t=str(tn)
					num1 = float(t)/10
					if num1 > num:
						nnnn = num1-num
						if nnnn <= 20:
							txt+=str(i)+'. '+text+' - <emoji document_id=6334846486928426691>‚ûñ</emoji> <code>'+str((num1-num))+'</code>\n'
						else:
							txt+=str(i)+'. '+text+' - <emoji document_id=5212932275376759608>‚úÖ</emoji> <code>+'+str((num1-num))+'</code>\n'
					else:
						txt+=str(i)+'. '+text+' - <emoji document_id=5465665476971471368>‚ùå</emoji> <code>'+str((num1-num))+'</code>\n'
				else:
					txt+=str(i)+'. –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–π <emoji document_id=5370781385885751708>üòî</emoji>\n'
			except Exception as e:
				txt+=str(i)+' '+str(e)+'\n'
			i=i+1
		return await utils.answer(message,txt)

	async def zarupdatecmd(self, message):
		"–û—Ç–≤–µ—Ç–æ–º –Ω–∞ –º–æ–∏ –∂–µ—Ä—Ç–≤—ã (–æ–±–Ω–æ–≤–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–µ—Ä—Ç–≤–µ)"
		infList = self.db.get("KMod", "infList")
		reply = await message.get_reply_message()
		txt = '<b><emoji document_id=6334840877701137860>üñã</emoji> –í–æ—Ç –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∂–µ—Ä—Ç–≤—ã:</b>\n'
		timezone = "Europe/Kiev"
		time = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
		messag = reply.message.split('\n')
		i = 1
		for value in reply.entities:
			if 'tg://openmessage?user_id=' in value.url:
				try:
					text = '@'+value.url.split("=")[1]
					user = None
					try:
						user = infList[text]
					except:
						user = None
					if user!=None:
						num = float(user[0])
						idx1 = messag[i].index("|")
						idx2 = messag[i].rindex("|")
						give = messag[i][idx1+1:idx2]
						t = str(give)
						t = t.replace(",", "." )
						t = t.replace("+", "" )
						t = t.strip()
						while "|" in t:
							t=t[t.index("|")+1:len(t)]
						num1 = 0
						if 'k' in t:
							tn = float(t[0:(len(t)-1)])
							tn=tn*1000
							t=str(tn)
						num1 = float(t)
						user, count = str(text), float(num1)
						us = None
						try:
							us = infList[text]
						except:
							us = None
						addtxt = ''
						if us!=None:
							addtxt='<s>'+us[0]+'</s> -'
						infList[user] = [str(count), time]
						self.db.set("KMod", "infList", infList)
						txt+=str(i)+'. '+text+' - '+addtxt+'<code>'+str(num1)+'</code>\n'
				except Exception as e:
					txt+=str(i)+' '+str(e)+'\n'
			i=i+1

		return await utils.answer(message,txt)

	async def zarfiltercmd(self, message):
		"""  {args1} {args2 OR reply} \n–í—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã."""
		args = utils.get_args_raw(message)
		reply = await message.get_reply_message()
		filter_and_users = self.db.get("KMod", "numfilter", {'users': [], 'filter': None, 'status': False})
		if not args:
			return await utils.answer(message, f"‚ûï <code>add</code> --- –¥–æ–±–∞–≤–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–æ–≤(–Ω–µ –±–æ–ª—å—à–µ 10), –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä(–∏–¥|—Ä–µ–ø–ª–∞–π).\n[{', '.join(list('<code>' + i + '</code>' for i in filter_and_users['users']))}]\n<emoji document_id=5467461928647399673>‚ùî</emoji> <code>pref</code> --- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä. –î–æ–ø—É—Å—Ç–∏–º –æ–¥–∏–Ω.\n<code>{filter_and_users['filter'] if filter_and_users['filter'] else '<emoji document_id=6334578700012488415>‚ùå</emoji> –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.'}</code>\n<code>start</code> --- –∑–∞–ø—É—Å—Ç–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.\n<b>{'<emoji document_id=5212932275376759608>‚úÖ</emoji> –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω' if filter_and_users['status'] else '<emoji document_id=5215273032553078755>‚ùé</emoji> –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}.</b>\n\n<emoji document_id=5472319622558522557>üìù</emoji> –†–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫:\n[—Ñ–∏–ª—å—Ç—Ä] —á–µ–∫ @id - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∂–µ—Ä—Ç–≤—ã\n[—Ñ–∏–ª—å—Ç—Ä] —á–µ–∫–ª–∏—Å—Ç/[—Ñ–∏–ª—å—Ç—Ä] –∑–∞—Ä—á–µ–∫/[—Ñ–∏–ª—å—Ç—Ä] –ª–∏—Å—Ç—á–µ–∫ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –±–∏–æ—Ç–æ–ø/–±–∏–æ—Ç–æ–ø —á–∞—Ç–∞/–±–∏–æ—Ç–æ–ø –∫–æ—Ä–ø\n[—Ñ–∏–ª—å—Ç—Ä] –¥–æ–± @id —Ä–µ—Å—ã (–±–µ–∑ –ö) - –¥–æ–±–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞—Ä–ª–∏—Å—Ç")
		args = args.split(' ', maxsplit=1)
		if len(args) == 1 and not reply and args[0] != 'start':
			return await utils.answer(message, '<emoji document_id=5465665476971471368>‚ùå</emoji> –ù–µ—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ —Ä–µ–ø–ª–∞—è.')
		elif args[0] == 'add':
			try:
				user_id = args[1]
				if not user_id.isdigit():
					return await utils.answer(message, '–≠—Ç–æ –Ω–µ –∏–¥.')
			except:
				user_id = str(reply.sender_id)
			if user_id in filter_and_users['users']:
				filter_and_users['users'].remove(user_id)
				await utils.answer(message, f"<emoji document_id=5212932275376759608>‚úÖ</emoji> –ò–¥ <code>{user_id}</code> —É–¥–∞–ª—ë–Ω.")
			elif len(filter_and_users['users']) <= 10:
				filter_and_users['users'].append(user_id)
				await utils.answer(message, f"<emoji document_id=5212932275376759608>‚úÖ</emoji> –ò–¥ <code>{user_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω.")
			else:
				return await utils.answer(message, '<emoji document_id=5465665476971471368>‚ùå</emoji> –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 10 —é–∑–µ—Ä–æ–≤.')
			return self.db.set("KMod", "numfilter", filter_and_users)
		elif args[0] == 'pref':
			try:
				filter_and_users['filter'] = args[1].lower().strip()
				self.db.set("KMod", "numfilter", filter_and_users)
				return await utils.answer(message, f"<emoji document_id=5212932275376759608>‚úÖ</emoji> –§–∏–ª—å—Ç—Ä ~~~ <code>{args[1]}</code> ~~~ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
			except:
				return await utils.answer(message, "–ì–¥–µ 2 –∞—Ä–≥—É–º–µ–Ω—Ç <emoji document_id=6052881140916684433>‚ùì</emoji>")
		elif args[0] == 'start':
			if filter_and_users['status']:
				filter_and_users['status'] = False
				self.db.set("KMod", "numfilter", filter_and_users)
				return await utils.answer(message, "<emoji document_id=5465665476971471368>‚ùå</emoji> –§–∏–ª—å—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
			else:
				filter_and_users['status'] = True
				self.db.set("KMod", "numfilter", filter_and_users)
				return await utils.answer(message, "<emoji document_id=5212932275376759608>‚úÖ</emoji> –§–∏–ª—å—Ç—Ä –∑–∞–ø—É—â–µ–Ω.")
		else:
			return await utils.answer(message, "<emoji document_id=5465665476971471368>‚ùå</emoji> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.")


	async def watcher(self, message):
		if not isinstance(message, telethon.tl.types.Message): return
		filter_and_users = self.db.get("KMod", "numfilter", {'users': [], 'filter': None, 'status': False})
		user_id = str(message.sender_id)
		if not filter_and_users['filter'] or not filter_and_users['status'] or user_id not in filter_and_users['users'] or message.is_private: return
		text = message.raw_text.lower()
		if not text.startswith(filter_and_users['filter']): return
		text=text.replace(filter_and_users['filter'],'')
		text=text.strip()
		key = ''
		try:
			key = text[0:text.index(' ')]
		except:
			key = text[0:len(text)]
		key=key.strip()
		text=text.replace(key,'')
		text=text.strip()
		if key=='—á–µ–∫':
			if "@" in text:
				infList = self.db.get("KMod", "infList")
				try:
					idd = text[text.index("@"):len(text)]
					user = infList[text[text.index("@"):len(text)]]
					await message.respond(f"<b><emoji document_id=5212932275376759608>‚úÖ</emoji> –ñ–µ—Ä—Ç–≤–∞ <code>{idd}</code>:\n‚ò£Ô∏è {user[0]} –±–∏–æ-–æ–ø—ã—Ç–∞.\n<emoji document_id=6334497185828177668>üìÖ</emoji> –î–∞—Ç–∞: <i>{user[1]}</i></b>")
				except:
					await message.respond("<emoji document_id=5215273032553078755>‚ùé</emoji> –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
			else:
				await message.respond("<emoji document_id=5215273032553078755>‚ùé</emoji> –£–∫–∞–∂–∏—Ç–µ –∏–¥ –≤–º–µ—Å—Ç–µ —Å @")
		elif key=='–ª–∏—Å—Ç—á–µ–∫' or key=='–∑–∞—Ä—á–µ–∫' or key=='—á–µ–∫–ª–∏—Å—Ç':
			infList = self.db.get("KMod", "infList")
			reply = await message.get_reply_message()
			txt = '<b>üëÆ –í–æ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã–µ –∂–µ—Ä—Ç–≤—ã:</b>\n'
			messag = reply.message.split('\n')
			i = 1
			for value in reply.entities:	
				try:
					text = '@'+value.url.split("=")[1]
					user = None
					try:
						user = infList[text]
					except:
						user = None
					if user!=None:
						num = float(user[0])
						idx1 = messag[i].index("|")
						idx2 = messag[i].rindex("|")
						give = messag[i][idx1+1:idx2-6]
						t = str(give)
						t = t.replace(",", "." )
						while "|" in t:
							t=t[t.index("|")+1:(len(t)-1)]
						num1 = 0
						if t.endswith('k'):
							tn = float(t[0:(len(t)-1)])
							tn=tn*1000
							t=str(tn)
						num1 = float(t)/10
						if num1 > num:
							nnnn = num1-num
							if nnnn <= 20:
								txt+=str(i)+'. '+text+' - <emoji document_id=6334846486928426691>‚ûñ</emoji> <code>'+str((num1-num))+'</code>\n'
							else:
								txt+=str(i)+'. '+text+' - <emoji document_id=5212932275376759608>‚úÖ</emoji> <code>+'+str((num1-num))+'</code>\n'
						else:
							txt+=str(i)+'. '+text+' - <emoji document_id=5465665476971471368>‚ùå</emoji> <code>'+str((num1-num))+'</code>\n'
					else:
						txt+=str(i)+'. –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–π <emoji document_id=5370781385885751708>üòî</emoji>\n'
				except Exception as e:
					txt+=str(i)+' '+str(e)+'\n'
				i=i+1
			return await message.respond(txt)
		elif key=='–¥–æ–±':
			infList = self.db.get("KMod", "infList")
			timezone = "Europe/Kiev"
			time = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
			reply = await message.get_reply_message()
			args_list = text.split(' ')
			if len(args_list)==2:
				try:
					user, count = str(args_list[0]), float(args_list[1])
				except:
					await message.respond( "<emoji document_id=5215273032553078755>‚ùé</emoji> –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
					return

				infList[user] = [str(count), time]
				self.db.set("KMod", "infList", infList)
				await message.respond(
					f"<emoji document_id=5212932275376759608>‚úÖ</emoji> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{args_list[0]}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π!\n"
					f"‚ÑπÔ∏è –ß–∏—Å–ª–æ: <code>{count}</code>\n"
					f"<emoji document_id=6334497185828177668>üìÖ</emoji> –î–∞—Ç–∞: <b>{time}</b>"
				)
			else:
				if not reply: 
					return await message.respond( '<emoji document_id=5215273032553078755>‚ùé</emoji> –†–µ–ø–ª–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–º—Å –∏—Ä–∏—Å–∞ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"')
				elif not '–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' in reply.text and not '–ø–æ–¥–≤–µ—Ä–≥–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' in reply.text:
					return await message.respond( '<emoji document_id=5215273032553078755>‚ùé</emoji> –†–µ–ø–ª–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–º—Å –∏—Ä–∏—Å–∞ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"')
				else: #‚ò£
					text = reply.text
					x = text.index('‚ò£')+4
					count = text[x:].split(' ', maxsplit=1)[0]
					t = str(count)
					t = t.replace(",", "." )
					if t.endswith('k'):
						tn = float(t[0:(len(t)-1)])
						tn=tn*1000
						t=str(tn)
					x = text.index('user?id=') + 8
					user = '@' + text[x:].split('"', maxsplit=1)[0]
					infList[user] = [t, time]
					self.db.set("KMod", "infList", infList)
					await message.respond( f"<emoji document_id=5212932275376759608>‚úÖ</emoji> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π.\n‚ÑπÔ∏è –ß–∏—Å–ª–æ: <code>{count}</code>\n<emoji document_id=6334497185828177668>üìÖ</emoji> –î–∞—Ç–∞: <b>{time}</b>")
