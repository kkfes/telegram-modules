# meta developer: @kkfes

from .. import loader, utils
import asyncio, pytz, re, telethon
from telethon.tl.types import MessageEntityTextUrl
import json as JSON
from datetime import datetime, date, time

class KMod(loader.Module):
	"–ú–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–Ω–∏—è –∂–µ—Ä—Ç–≤ Iris Bot"
	strings={"name": "KMod"}
	
	async def client_ready(self, client, db):
		self.db = db
		if not self.db.get("KMod", "infList", False):
			self.db.set("KMod", "infList", {})
	

	async def zaraddcmd(self, message):
		" –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Ä–∏—Å–∞ —Å –∑–∞—Ä–∞–∂–µ–Ω–∏–µ–º, –¥–æ–±–∞–≤–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π (@is/name –∑–Ω–∞—á–µ–Ω–∏–µ) –ë–ï–ó –ö, –ø–∏—Å–∞—Ç—å 8700 —Ç —Ç.–¥"
		infList = self.db.get("KMod", "infList")
		timezone = "Europe/Kiev"
		time = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
		reply = await message.get_reply_message()
		args = utils.get_args_raw(message)
		args_list = args.split(' ')
		if len(args_list)==2:
			try:
				user, count = str(args_list[0]), float(args_list[1])
			except:
				await utils.answer(message, "‚ùé –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
				return

			infList[user] = [str(count), time]
			self.db.set("NumMod", "infList", infList)
			await utils.answer(
				message,
				f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{args_list[0]}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π!\n"
				f"‚ÑπÔ∏è –ß–∏—Å–ª–æ: <code>{count}</code>\n"
				f"üìÖ –î–∞—Ç–∞: <b>{time}</b>"
			)
		else:
			if not reply: 
				return await utils.answer(message, '‚ùé –†–µ–ø–ª–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–º—Å –∏—Ä–∏—Å–∞ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"')
			elif reply.sender_id != 707693258 and not '–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' in reply.text:
				return await utils.answer(message, '‚ùé –†–µ–ø–ª–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–º—Å –∏—Ä–∏—Å–∞ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"')
			else: #‚ò£
				text = reply.text
				x = text.index('‚ò£')+4
				count = text[x:].split(' ', maxsplit=1)[0]
				t = str(count)
				t = t.replace(",", "." )
				if t.endswith('k'):
					tn = float(t[0:(len(t)-1)])
					tn=tn*1000
					t=str(tn)
				x = text.index('user?id=') + 8
				user = '@' + text[x:].split('"', maxsplit=1)[0]
				infList[user] = [t, time]
				self.db.set("KMod", "infList", infList)
				await utils.answer(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π.\n‚ÑπÔ∏è –ß–∏—Å–ª–æ: <code>{count}</code>\nüìÖ –î–∞—Ç–∞: <b>{time}</b>")


	async def zarlistcmd(self, message):
		"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π"
		infList = self.db.get("KMod", "infList")
		sms = 'üåÄ –°–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π:\n'
		for key, value in infList.items():
			sms+=f'<b>‚Ä¢ <code>{key}</code> -- <code>{value[0]}</code> [<i>{value[1]}</i>]</b>\n'
		await utils.answer(message, sms)

	async def zarfcmd(self, message):
		"–ø–æ–∏—Å–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π .zarf @id/@name"
		infList = self.db.get("KMod", "infList")
		args = utils.get_args_raw(message)
		args_list = args.split(' ')
		try:
			user = infList[args_list[0]]
			await utils.answer(message, f"<b>‚úÖ –ñ–µ—Ä—Ç–≤–∞ <code>{args_list[0]}</code>:\n‚ò£Ô∏è{user[0]} –±–∏–æ-–æ–ø—ã—Ç–∞.\nüìÜ –î–∞—Ç–∞: <i>{user[1]}</i></b>")
		except:
			await utils.answer(message, "‚ùé –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

	async def zarrmcmd(self, message):
		"–£–¥–∞–ª—è–µ—Ç –∏–¥ –∏–∑ —Å–ø–∏—Å–∫–∞"
		infList = self.db.get("KMod", "infList")
		args = utils.get_args_raw(message)
		args_list = args.split(' ')
		try:
			infList.pop(args_list[0])
			self.db.set("NumMod", "infList", infList)
			await utils.answer(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{args}</code> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
		except:
			await utils.answer(message, "‚ùé –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")


	async def zarcheckcmd(self, message):
		"–û—Ç–≤–µ—Ç–æ–º –Ω–∞ –±–∏–æ—Ç–æ–ø/–±–∏–æ—Ç–æ–ø —á–∞—Ç–∞/–±–∏–æ—Ç–æ–ø –∫–æ—Ä–ø"
		infList = self.db.get("KMod", "infList")
		reply = await message.get_reply_message()
		txt = '<b>üëÆ –í–æ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã–µ –∂–µ—Ä—Ç–≤—ã:</b>\n'
		messag = reply.message.split('\n')
		i = 1
		for value in reply.entities:	
			try:
				text = '@'+value.url.split("=")[1]
				user = None
				try:
					user = infList[text]
				except:
					user = None
				if user!=None:
					num = float(user[0])
					idx1 = messag[i].index("|")
					idx2 = messag[i].index("|",idx1+1)
					give = messag[i][idx1+1:idx2-6]
					t = str(give)
					t = t.replace(",", "." )
					num1 = 0
					if t.endswith('k'):
						tn = float(t[0:(len(t)-1)])
						tn=tn*1000
						t=str(tn)
					num1 = float(t)/10
					if num1 > num:
						nnnn = num1-num
						if nnnn <= 20:
							txt+=str(i)+'. '+text+' - ‚ûñ <code>'+str((num1-num))+'</code>\n'
						else:
							txt+=str(i)+'. '+text+' - ‚úÖ <code>+'+str((num1-num))+'</code>\n'
					else:
						txt+=str(i)+'. '+text+' - ‚ùå <code>'+str((num1-num))+'</code>\n'
				else:
					txt+=str(i)+'. –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–π üòî\n'
			except Exception as e:
				txt+=str(i)+' '+str(e)+'\n'
			i=i+1
		return await utils.answer(message,txt)
